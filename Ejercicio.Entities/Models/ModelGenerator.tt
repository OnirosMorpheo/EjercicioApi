<#@ template hostspecific="True" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Windows.Forms" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
    
<#
/* 
This code is part of the Dapper.SimpleCRUD project
It is based on the T4 template from the PetaPoco project which in turn is based on the subsonic project.
 -----------------------------------------------------------------------------------------
 This template can read minimal schema information from the following databases:

	* SQL Server
 -----------------------------------------------------------------------------------------
*/
	// Settings
    ConnectionStringName = "conexionEjercicio"; // Uses last connection string in config if not specified
	ConfigPath = @""; //Looks in current project for web.config or app.config by default. This overrides to a relative path - useful for seperate class library projects.
    Namespace = "Ejercicio.Entities";
	ClassPrefix = "";
	ClassSuffix = "Dto";
    IncludeViews = true;
    IncludeRelationships = true;
	ExcludeTablePrefixes = new string[]{"aspnet_","webpages_","sysdiagrams","RC_Migrated","TEMP_", "__"};
    CultureInfo ci = new CultureInfo("en-us");
    PluralizationService ps = PluralizationService.CreateService(ci);	

    // Read schema
	List<string> listaDtoYaGenerados = new List<string>();
    var tables = LoadTables();
    var funcionesTabla = LoadFuncionTabla();        
    var procedimientos = LoadProcedimientos();
    var tiposDto = LoadTiposDto();
    var columnas = LoadColumnasFuncionTabla();

    var tiposPapelera = LoadTiposPapelera();
    
    Dictionary<string, List<ColumnaTablaRetornoProc>> columnasProc = new Dictionary<string, List<ColumnaTablaRetornoProc>>();
    foreach(var proc in procedimientos) 
    {
        columnasProc.Add(proc.Nombre, LoadColumnasProcedimiento(proc.Nombre));
    }

    Dictionary<string, List<ColumnaTablaRetornoFT>> columnasFuncionTabla  = columnas.GroupBy(elemento => elemento.NombreFT)
                                                                                    .ToDictionary(elemento => elemento.Key, 
                                                                                                  elemento => elemento.Select(elemento => elemento)
                                                                                                                      .Where(elemento => elemento.Nombre != "SortID")
                                                                                                                      .ToList());
    foreach(var fun in funcionesTabla){
        fun.ColumnasRetorno = columnasFuncionTabla.ContainsKey(fun.Nombre) ? columnasFuncionTabla[fun.Nombre] : new List<ColumnaTablaRetornoFT>();
    }


#>


namespace <#=Namespace #>
{

	using Ejercicio.Persistencia;
    using Ejercicio.Persistencia.Interfaces;
    using Ejercicio.Persistencia.Metadata;
    using Ejercicio.Persistencia.Propiedades;
    using Ejercicio.Trazas;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    public enum TypeRecyclebin : int {
<#for(int i = 0;i < tiposPapelera.Count();i++){
        TipoPapelera tipo = tiposPapelera[i];
#>
        <#=tipo.Nombre#> = <#=tipo.Id#><#=i==tiposPapelera.Count()-1 ? string.Empty : ", "#>
<#}#>    }

    public class Auditoria
    {
        public string CreatedBy { get; set; }
        public DateTime CreatedDate { get; set; }
        public string UpdateBy { get; set; }
        public DateTime UpdatedDate { get; set; }
    }

<#
	var tablasAux = (from t in tables 
					 where !t.Ignore && 
						   !IsExcluded(t.Name, ExcludeTablePrefixes) 
					 select t).ToList(); 
    foreach(Table tbl in tablasAux){
  
		var listaClavesPrimarias = tbl.ColumnsNoAuditoria().Where(elemento=> tbl.IsPrimaryKeyColumn(elemento.PropertyName)).ToList();
		List<string> campos = listaClavesPrimarias.Select(elemento=> elemento.PropertyName).ToList();
        List<string> camposNoIdentity = tbl.Columns.Where(col => tbl.IsPrimaryKeyColumn(col.PropertyName) && !col.IsAutoIncrement).Select(elemento => elemento.PropertyName).ToList();
		List<string> comparaciones = campos.Select(elemento => string.Format("[{0}] = @{0}", elemento)).ToList();
		string sWhere = string.Join(" AND ", comparaciones);
		string sSelect = string.Join(", ", campos.Select(elemento => string.Format("_{0}.[{1}]", tbl.Name.ToLower(), elemento)));
		string sToStr = string.Join(", ", campos);
        string sList = string.Join("\", \"", camposNoIdentity);
#>
	public partial class Key<#=tbl.ClassName#> : <#=(tbl.HeredaAuditoria() ? "Auditoria, ": string.Empty) #> IPrimaryKey
	{<#foreach(Column col in listaClavesPrimarias) {#>
        
        [Key]
		public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }<#}#>
        
        [NotMapped]
		public int Count => <#=listaClavesPrimarias.Count()#>;
        [NotMapped]
		public string Where => "<#=sWhere#>";
        [NotMapped]
		public string Select => "<#=sSelect#>";
		[NotMapped]
		public List<string> ListaParametros => new List<string>()<#=(string.IsNullOrEmpty(sList) ? string.Empty : " { \"" + sList + "\" }")#>;
		public override string ToString()
		{
			return "<#=sToStr#>";
		}
	}
    
	[Table("[<#=tbl.Name#>]")]
	[Alias("_<#=tbl.Name.ToLower()#>")]
	public partial class <#=tbl.ClassName#> : Key<#=tbl.ClassName#> 
	{
<#foreach(Column col in from c in tbl.ColumnsNoAuditoria() where !c.Ignore select c)
{
if (tbl.IsPrimaryKeyColumn(col.PropertyName)) continue;#><# if (col.MaxLength.HasValue) { #>
        [MaxLength(<#=col.MaxLength.Value#>)]
    <#}#><# else {#>    <#}#><# if (!tbl.IsPrimaryKeyColumn(col.PropertyName) && !col.IsNullable) {#>
    [Required]
	<#}#><# if (col.Descripcion.Contains("[OnlyInsert]") && !col.IsNullable) { #>
	    [RequiredOnlyInsert]
	<#}#>
	public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
<#}#>
<# if (IncludeRelationships) { #>
<#foreach(Key key in from k in tbl.OuterKeys select k)
{
#>
		[OneToOne("<#= key.ReferencingTableColumnName #>","<#= key.ReferencedTableColumnName #>")]
		public virtual <#=tables[key.ReferencedTableName].ClassName #> <#= key.ReferencingClean #> { get; set; } 
<#}#>
<#foreach(Key key in from k in tbl.InnerKeys select k)
{#>
		[OneToMany("<#= key.ReferencedTableColumnName #>", "<#= key.ReferencingTableColumnName #>")]
		public virtual IEnumerable<<#=tables[key.ReferencingTableName].ClassName #>> <#=tables[key.ReferencingTableName].CleanName #>_<#= ps.Pluralize(key.ReferencingClean) #>  { get; set; } = Enumerable.Empty<<#=tables[key.ReferencingTableName].ClassName #>>();
<#}#>
<#}#>
	}

<#}#>



    internal class MetadataDB
    {
        public List<Tabla> Tablas { get; set; }
        public List<Relacion> Relaciones { get; set; }
        public MetadataDB()
        {
            Tablas = new List<Tabla>();
            Relaciones = new List<Relacion>();

            var tablasDict = new Dictionary<string, Tabla>();

			// TABLAS
<#
	var tablesAux = (from t in tables where !t.Ignore select t).ToList();
    foreach(Table tbl in tablesAux){
        if(IsExcluded(tbl.Name, ExcludeTablePrefixes)) continue;
#>
			#region <#=            tbl.Name#>
			var tab_<#=            tbl.Name#> = new Tabla("_<#=            tbl.Name.ToLower()#>","<#=            tbl.Name#>"); 
<#        foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
        {#>
			tab_<#=                tbl.Name#>.Propiedades.Add(new Propiedad("<#=                col.PropertyName #>","<#=                col.PropertyType #><#=                CheckNullable(col)#>","<#=                col.Descripcion #>",<#=                col.IsNullable.ToString().ToLower() #>,<#=                col.MaxLength??0 #>));
<#        }#>
			tablasDict.Add("<#=            tbl.Name#>",tab_<#=            tbl.Name#>);
			#endregion
<#    }#>

            Tablas = tablasDict.Select(kv => kv.Value).ToList();

			// RELACIONES
<#
    foreach(Table tbl in from t in tables where !t.Ignore select t)
    {

        if(IsExcluded(tbl.Name, ExcludeTablePrefixes)
            || (tbl.OuterKeys.Count == 0 && tbl.InnerKeys.Count == 0)) continue;		
#>
			#region <#=            tbl.Name#>
<#
        foreach(Key key in from k in tbl.OuterKeys select k)
        {
#>
					tab_<#=                tbl.Name#>.Relaciones.Add(new Relacion(tab_<#=                tbl.Name#>, tab_<#=                key.ReferencedTableName #>, TipoRelacion.One, "<#=                key.ReferencingTableColumnName #>", "<#=                key.ReferencedTableColumnName #>"));	/*ID -> _<#=                tbl.Name.ToLower()#>_<#=                key.ReferencingTableColumnName.ToLower() #>_<#=                key.ReferencedTableName.ToLower()#>*/
<#
        }
        foreach(Key key in from k in tbl.InnerKeys select k)
        {
#>
					tab_<#=                tbl.Name#>.Relaciones.Add(new Relacion(tab_<#=                tbl.Name#>, tab_<#=                key.ReferencingTableName #>, TipoRelacion.Many, "<#=                key.ReferencedTableColumnName #>", "<#=                key.ReferencingTableColumnName #>"));	/*ID -> _<#=                tbl.Name.ToLower()#>_<#=                key.ReferencingTableName.ToLower()#>_<#=                key.ReferencingTableColumnName.ToLower() #>*/
<#
        }
#>
			#endregion
<#
    }
#>

			Relaciones = Tablas.SelectMany(t => t.Relaciones).GroupBy(r => r.Id).Select(gb => gb.First()).ToList();
        }
    }
<#
    foreach(FuncionTabla funcion in funcionesTabla)
    {
        string sParametros = string.Join(", ", funcion.Parametros.Select(elemento => $"@{elemento.Nombre}"));
        string sColumnas = string.Join(", ", funcion.ColumnasRetorno.Select(elemento => $"[{elemento.Nombre}]"));        
        string sNombreDto = string.Empty;

        var tablasBusqueda = (from t in tables 
					 where !t.Ignore && 
						   !IsExcluded(t.Name, ExcludeTablePrefixes) 
					 select t).ToList(); 
        foreach(Table tbl in tablasBusqueda){
            if(tbl.IsColumns(funcion.ColumnasRetorno))
            {
                sNombreDto = tbl.ClassName;
                break;
            }
        }

        if(sNombreDto == string.Empty){
            foreach(TipoDto tipo in tiposDto){
                if(tipo.IsColumns(funcion.ColumnasRetorno))
                {
                    sNombreDto = tipo.Nombre;
                    if(!listaDtoYaGenerados.Contains(sNombreDto)) { 
                        listaDtoYaGenerados.Add(sNombreDto);
                    }
                    break;
                }
            }
        }
        
    #>

    public class ParamsFn<#=funcion.Nombre#> : IParamsTableValued
    {<#foreach(var parametro in funcion.Parametros){#>        
        public <#=parametro.Tipo + (parametro.Tipo != "string" ? "?" : string.Empty)#> <#=parametro.Nombre#> { get; set; }<#}#>

        public string Lista { get => "<#=sParametros#>"; }
    }

    public class Fn<#=funcion.Nombre#> : TableValued<ParamsFn<#=funcion.Nombre#>, <#=sNombreDto#>>, IDisposable
    {
        private string _query = "SELECT <#=sColumnas#> FROM <#=funcion.Nombre#>(<#=sParametros#>)";
        public override string Query { 
            get {
                return _query;
            } 
            set {
                _query = value;
            } 
        }
               
        public new IEnumerable<<#=sNombreDto#>> Results;
        
        public Fn<#=funcion.Nombre#>(IDatabaseConnectionFactory databaseConnectionFactory, TrazaLoggerInterceptor trazaLoggerInterceptor) : base(databaseConnectionFactory, trazaLoggerInterceptor)
        {
           
        }

        #region Patron Disposable

        private bool disposed = false;

        protected new virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    // dispose-only, i.e. non-finalizable logic
                    base.Dispose();
                }

                // shared cleanup logic
                disposed = true;
            }
        }

        ~Fn<#=funcion.Nombre#>()
        {
            Dispose(false);
        }

        public new void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }


        #endregion

    }
  <#}

    
    foreach(Procedimiento procedimiento in procedimientos.Where(elemento => columnasProc[elemento.Nombre].Count() > 0))
    {
        IEnumerable<string> listaParametros = procedimiento.Parametros.Select(elemento => $"@{elemento.Nombre}");
        string sParametros = string.Join(", ", listaParametros.Select(elemento => $"\"{elemento}\""));
        string sColumnas = string.Join(", ",  columnasProc[procedimiento.Nombre].Select(elemento => $"[{elemento.Nombre}]"));        
        string sNombreDto = string.Empty;
        
        foreach(TipoDto tipo in tiposDto){
            if(tipo.IsColumns(columnasProc[procedimiento.Nombre]))
            {
                sNombreDto = tipo.Nombre;
                break;
            }
        }


    if(!listaDtoYaGenerados.Contains(sNombreDto)) { 
        listaDtoYaGenerados.Add(sNombreDto);
    #>
    
        
<#}#>
    public class ParamsProc<#=procedimiento.Nombre#> : IParamsProcedure
    {<#foreach(var parametro in procedimiento.Parametros){#>        
        public <#=parametro.Tipo + (parametro.Tipo != "string" ? "?" : string.Empty)#> <#=parametro.Nombre#> { get; set; }<#}#>
        
        public IEnumerable<string> Lista => new List<string>() { <#=sParametros#> };

    }

    public class Proc<#=procedimiento.Nombre#> : Procedure<ParamsProc<#=procedimiento.Nombre#>, <#=sNombreDto#>>, IDisposable
    {
        private string _name = "<#=procedimiento.Nombre#>";
        public override string Name { 
            get {
                return _name;
            } 
            set {
                _name = value;
            } 
        }
               
        public new IEnumerable<<#=sNombreDto#>> Results;
        
        public Proc<#=procedimiento.Nombre#>(IDatabaseConnectionFactory databaseConnectionFactory, TrazaLoggerInterceptor trazaLoggerInterceptor) : base(databaseConnectionFactory, trazaLoggerInterceptor)
        {
           
        }

        #region Patron Disposable

        private bool disposed = false;

        protected new virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    // dispose-only, i.e. non-finalizable logic
                    base.Dispose();
                }

                // shared cleanup logic
                disposed = true;
            }
        }

        ~Proc<#=procedimiento.Nombre#>()
        {
            Dispose(false);
        }

        public new void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }


        #endregion

    }
<#}

    foreach(Procedimiento procedimiento in procedimientos.Where(elemento => columnasProc[elemento.Nombre].Count() == 0))
    {
        IEnumerable<string> listaParametros = procedimiento.Parametros.Select(elemento => $"@{elemento.Nombre}");
        string sParametros = string.Join(", ", listaParametros.Select(elemento => $"\"{elemento}\""));                
    #>

    public class ParamsProc<#=procedimiento.Nombre#> : IParamsProcedure
    {<#foreach(var parametro in procedimiento.Parametros){#>        
        public <#=parametro.Tipo + (parametro.Tipo != "string" ? "?" : string.Empty)#> <#=parametro.Nombre#> { get; set; }<#}#>
        
        public IEnumerable<string> Lista => new List<string>() { <#=sParametros#> };

    }

    public class Proc<#=procedimiento.Nombre#> : Procedure<ParamsProc<#=procedimiento.Nombre#>, int>, IDisposable
    {
        private string _name = "<#=procedimiento.Nombre#>";
        public override string Name { 
            get {
                return _name;
            } 
            set {
                _name = value;
            } 
        }

        public new IEnumerable<int> Results;        

        public Proc<#=procedimiento.Nombre#>(IDatabaseConnectionFactory databaseConnectionFactory, TrazaLoggerInterceptor trazaLoggerInterceptor) : base(databaseConnectionFactory, trazaLoggerInterceptor)
        {
           
        }

        #region Patron Disposable

        private bool disposed = false;

        protected new virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    // dispose-only, i.e. non-finalizable logic
                    base.Dispose();
                }

                // shared cleanup logic
                disposed = true;
            }
        }

        ~Proc<#=procedimiento.Nombre#>()
        {
            Dispose(false);
        }

        public new void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }


        #endregion

    }
  <#}#>


    <#foreach(TipoDto tipo in tiposDto){
        string sNombreDto = tipo.Nombre;
#>
    public class <#=sNombreDto#>
    {<#foreach(var columna in tipo.Parametros){#>
        
        public <#=columna.Tipo#> <#=columna.Nombre#> { get; set; }
    <#}#>}
    <#}#>
}
<#+
/*
The contents of this file are subject to the New BSD
 License (the "License"); you may not use this file
 except in compliance with the License. You may obtain a copy of
 the License at http://www.opensource.org/licenses/bsd-license.php
 
 Software distributed under the License is distributed on an 
 "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 implied. See the License for the specific language governing
 rights and limitations under the License.
*/

    string ConnectionStringName = "";
    string ConfigPath = "";
    string Namespace = "";
	string ClassPrefix = "";
    string ClassSuffix = "";
    string SchemaName = null;
    bool IncludeViews;
    bool IncludeRelationships;
    string[] ExcludeTablePrefixes = new string[]{};

    public class Table
    {
        private List<string> propiedadesAuditoria = new List<string>(){"CreatedBy","CreatedDate","UpdateBy","UpdatedDate"};

        public List<Column> Columns;	
        public List<Key> InnerKeys = new List<Key>();
        public List<Key> OuterKeys = new List<Key>(); 
        public string Name;
        public string Schema;
        public bool IsView;
        public string CleanName;
        public string ClassName;
        public string SequenceName;
        public bool Ignore;

        public bool IsColumns(List<ColumnaTablaRetornoFT> columnas)
        {
            if(Columns.Count() != columnas.Count()) return false;
            foreach(var col in columnas){
                if(!Columns.Any(elemento => elemento.Name == col.Nombre)){
                    return false;
                }
            }
            return true;
        }

        public bool IsPrimaryKeyColumn(string columnName)
        {
            return Columns.Single(x=>string.Compare(x.Name, columnName, true)==0).IsPK;
        }

        public Column GetColumn(string columnName)
        {
            return Columns.Single(x=>string.Compare(x.Name, columnName, true)==0);
        }

        public Column this[string columnName]
        {
            get
            {
                return GetColumn(columnName);
            }
        }
    
        public bool HeredaAuditoria(){
            return propiedadesAuditoria.All(p => Columns.Any(c => c.PropertyName == p)); 
        }

        public List<Column> ColumnsNoAuditoria(){
            return HeredaAuditoria() ? Columns.Where(c => !propiedadesAuditoria.Contains(c.PropertyName)).ToList()    
                : Columns;
        }

    }

    public class Column
    {
        public string Name;
        public string PropertyName;
        public string PropertyType;
        public string Descripcion;
        public bool IsPK;
        public bool IsNullable;
        public bool IsAutoIncrement;
        public bool Ignore;
        public int? MaxLength;
    }

    public class Key
    {
        public string Name;
        public string ReferencedTableName;
        public string ReferencedTableColumnName;
        public string ReferencedClean
        {
            get { return CleanId(ReferencedTableColumnName, ReferencedTableName); }
        }
        public string ReferencingTableName;
        public string ReferencingTableColumnName;
        public string ReferencingClean
        {
            get { return CleanId(ReferencingTableColumnName, ReferencingTableName); }
        }

        private string CleanId(string id, string def)
        {
            var removeChar = new List<string>() { "Id", "Uid", "_" };
            removeChar.ForEach(c => id = id.Replace(c, ""));
            if (string.IsNullOrEmpty(id))
                return def;
            return id;
        }
    }

    public class Tables : List<Table>
    {
        public Tables()
        {
        }
	
        public Table GetTable(string tableName)
        {
            return this.Single(x=>string.Compare(x.Name, tableName, true)==0);
        }

        public Table this[string tableName]
        {
            get
            {
                return GetTable(tableName);
            }
        }

    }

    static Regex rxCleanUp = new Regex(@"[^\w\d_]", RegexOptions.Compiled);

    static Func<string, string> CleanUp = (str) =>
        {
        str = rxCleanUp.Replace(str, "_");
        if (char.IsDigit(str[0])) str = "_" + str;
	
        return str;
        };

    string CheckNullable(Column col)
    {
        string result="";
        if(col.IsNullable && 
            col.PropertyType !="byte[]" && 
            col.PropertyType !="string" &&
            col.PropertyType !="Microsoft.SqlServer.Types.SqlGeography" &&
            col.PropertyType !="Microsoft.SqlServer.Types.SqlGeometry"
            )
            result="?";
        return result;
    }

    string GetConnectionString(ref string connectionStringName, out string providerName)
    {
        var _CurrentProject = GetCurrentProject();
        providerName=null;
    
        string result="";
        ExeConfigurationFileMap configFile = new ExeConfigurationFileMap();
        configFile.ExeConfigFilename = GetConfigPath();
        if (string.IsNullOrEmpty(configFile.ExeConfigFilename))
            throw new ArgumentNullException("The project does not contain App.config or Web.config file.");
    
    
        var config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
        var connSection=config.ConnectionStrings;
        //if the connectionString is empty - which is the defauls
        //look for count-1 - this is the last connection string
        //and takes into account AppServices and LocalSqlServer
        if(string.IsNullOrEmpty(connectionStringName))
        {
            if(connSection.ConnectionStrings.Count>1)
            {
                connectionStringName = connSection.ConnectionStrings[connSection.ConnectionStrings.Count-1].Name;
                result=connSection.ConnectionStrings[connSection.ConnectionStrings.Count-1].ConnectionString;
                providerName=connSection.ConnectionStrings[connSection.ConnectionStrings.Count-1].ProviderName;
            }            
        }
        else
        {
            try
            {
                result=connSection.ConnectionStrings[connectionStringName].ConnectionString;
                providerName=connSection.ConnectionStrings[connectionStringName].ProviderName;
            }
            catch
            {
                result="There is no connection string name called '"+connectionStringName+"'";
            }
        }

        //	if (String.IsNullOrEmpty(providerName))
        //		providerName="System.Data.SqlClient";
    
        return result;
    }

    string _connectionString="";
    string _providerName="";

    void InitConnectionString()
    {
        if(String.IsNullOrEmpty(_connectionString))
        {
            _connectionString=GetConnectionString(ref ConnectionStringName, out _providerName);
            if(_connectionString.Contains("|DataDirectory|"))
            {
                //have to replace it
                string dataFilePath=GetDataDirectory();
                _connectionString=_connectionString.Replace("|DataDirectory|",dataFilePath);
            }    
        }
    }

    public string ConnectionString
    {
        get 
        {
            InitConnectionString();
            return _connectionString;
        }
    }

    public string ProviderName
    {
        get 
        {
            InitConnectionString();
            return _providerName;
        }
    }

    public EnvDTE.Project GetCurrentProject()  {
        IServiceProvider _ServiceProvider = (IServiceProvider)Host;
        if (_ServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");
	
        EnvDTE.DTE dte = (EnvDTE.DTE)_ServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");
	
        Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
        if (activeSolutionProjects == null)
            throw new Exception("DTE.ActiveSolutionProjects returned null");
	
        EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
        if (dteProject == null)
            throw new Exception("DTE.ActiveSolutionProjects[0] returned null");
	
        return dteProject;
    }

    private string GetProjectPath()
    {
        EnvDTE.Project project = GetCurrentProject();
        System.IO.FileInfo info = new System.IO.FileInfo(project.FullName);
        return info.Directory.FullName;
    }

    private string GetConfigPath()
    {
        if(ConfigPath !="")
            return Host.ResolvePath(ConfigPath);
        EnvDTE.Project project = GetCurrentProject();
        foreach (EnvDTE.ProjectItem item in project.ProjectItems)
        {
            // if it is the app.config file, then open it up
            if (item.Name.Equals("App.config",StringComparison.InvariantCultureIgnoreCase) || item.Name.Equals("Web.config",StringComparison.InvariantCultureIgnoreCase))
                return GetProjectPath() + "\\" + item.Name;
        }
        return String.Empty;
    }

    public string GetDataDirectory()
    {
        EnvDTE.Project project=GetCurrentProject();
        return System.IO.Path.GetDirectoryName(project.FileName)+"\\App_Data\\";
    }

    static string zap_password(string connectionString)
    {
        var rx = new Regex("Password=.*;", RegexOptions.Singleline | RegexOptions.Multiline | RegexOptions.IgnoreCase);
        return rx.Replace(connectionString, "Password=******;");
    }

    static string Singularize(string word)
    {
        var singularword = System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo.GetCultureInfo("en-us")).Singularize(word);
        return singularword;
    }
		
    static string RemoveTablePrefixes(string word)
    {
        var cleanword = word;
        if(cleanword.StartsWith("tbl_")) cleanword = cleanword.Replace("tbl_",""); 
        if(cleanword.StartsWith("tbl")) cleanword = cleanword.Replace("tbl",""); 
        cleanword = cleanword.Replace("_","");
        return cleanword;
    }

    static bool IsExcluded(string tablename, string[] ExcludeTablePrefixes)
    {
        for (int i = 0; i < ExcludeTablePrefixes.Length; i++)
        {
            string s = ExcludeTablePrefixes[i];
            if(tablename.StartsWith(s)) return true;
        }
        return false;
    }

    public List<ColumnaTablaRetornoFT> LoadColumnasFuncionTabla()
    { //ReadTablaRetornoFT
        InitConnectionString();
        
        DbProviderFactory _factory;
        try
        {
            _factory = DbProviderFactories.GetFactory(ProviderName);
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to load provider `{0}` - {1}", ProviderName, error));                        
            return new List<ColumnaTablaRetornoFT>();
        }

        try
        {
            List<ColumnaTablaRetornoFT> result;
            using(var conn=_factory.CreateConnection())
            {
                conn.ConnectionString=ConnectionString;         
                conn.Open();
        
                SchemaReader reader=null;
        
                // Assume SQL Server
                reader=new SqlServerSchemaReader();
			
                reader.outer=this;
                result=reader.ReadTablaRetornoFT(conn, _factory);                
                conn.Close();
                return result;
            }
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to read database schema - {0}", error));            
            return new List<ColumnaTablaRetornoFT>();
        }
    }

    public List<ColumnaTablaRetornoProc> LoadColumnasProcedimiento(string nombre)
    { //ReadTablaRetornoProc
        InitConnectionString();
        
        DbProviderFactory _factory;
        try
        {
            _factory = DbProviderFactories.GetFactory(ProviderName);
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to load provider `{0}` - {1}", ProviderName, error));                        
            return new List<ColumnaTablaRetornoProc>();
        }

        try
        {
            List<ColumnaTablaRetornoProc> result;
            using(var conn=_factory.CreateConnection())
            {
                conn.ConnectionString=ConnectionString;         
                conn.Open();
        
                SchemaReader reader=null;
        
                // Assume SQL Server
                reader=new SqlServerSchemaReader();
			
                reader.outer=this;
                result=reader.ReadTablaProcedimiento(conn, _factory, nombre);                
                conn.Close();
                return result;
            }
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to read database schema - {0}", error));            
            return new List<ColumnaTablaRetornoProc>();
        }
    }



    public List<FuncionTabla> LoadFuncionTabla()
    {
        InitConnectionString();
        
        DbProviderFactory _factory;
        try
        {
            _factory = DbProviderFactories.GetFactory(ProviderName);
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to load provider `{0}` - {1}", ProviderName, error));            
            return new List<FuncionTabla>();
        }

        try
        {
            List<FuncionTabla> result;
            using(var conn=_factory.CreateConnection())
            {
                conn.ConnectionString=ConnectionString;         
                conn.Open();
        
                SchemaReader reader=null;
        
                // Assume SQL Server
                reader=new SqlServerSchemaReader();
			
                reader.outer=this;
                result=reader.ReadFuncionTabla(conn, _factory);                
                conn.Close();
                return result;
            }
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to read database schema - {0}", error));            
            return new List<FuncionTabla>();
        }
    }

    public List<TipoPapelera> LoadTiposPapelera()
    {
        InitConnectionString();
        
        DbProviderFactory _factory;
        try
        {
            _factory = DbProviderFactories.GetFactory(ProviderName);
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to load provider `{0}` - {1}", ProviderName, error));            
            return new List<TipoPapelera>();
        }

        try
        {
            List<TipoPapelera> result;
            using(var conn=_factory.CreateConnection())
            {
                conn.ConnectionString=ConnectionString;         
                conn.Open();
        
                SchemaReader reader=null;
        
                // Assume SQL Server
                reader=new SqlServerSchemaReader();
			
                reader.outer=this;
                result=reader.ReadTiposPapelera(conn, _factory);                
                conn.Close();
                return result;
            }
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to read database schema - {0}", error));            
            return new List<TipoPapelera>();
        }
    } 

    public List<TipoDto> LoadTiposDto()
    {
        InitConnectionString();
        
        DbProviderFactory _factory;
        try
        {
            _factory = DbProviderFactories.GetFactory(ProviderName);
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to load provider `{0}` - {1}", ProviderName, error));            
            return new List<TipoDto>();
        }

        try
        {
            List<TipoDto> result;
            using(var conn=_factory.CreateConnection())
            {
                conn.ConnectionString=ConnectionString;         
                conn.Open();
        
                SchemaReader reader=null;
        
                // Assume SQL Server
                reader=new SqlServerSchemaReader();
			
                reader.outer=this;
                result=reader.ReadTiposDto(conn, _factory);                
                conn.Close();
                return result;
            }
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to read database schema - {0}", error));            
            return new List<TipoDto>();
        }
    }

    public List<Procedimiento> LoadProcedimientos()
    {
        InitConnectionString();
        
        DbProviderFactory _factory;
        try
        {
            _factory = DbProviderFactories.GetFactory(ProviderName);
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to load provider `{0}` - {1}", ProviderName, error));            
            return new List<Procedimiento>();
        }

        try
        {
            List<Procedimiento> result;
            using(var conn=_factory.CreateConnection())
            {
                conn.ConnectionString=ConnectionString;         
                conn.Open();
        
                SchemaReader reader=null;
        
                // Assume SQL Server
                reader=new SqlServerSchemaReader();
			
                reader.outer=this;
                result=reader.ReadProcedimiento(conn, _factory);                
                conn.Close();
                return result;
            }
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to read database schema - {0}", error));            
            return new List<Procedimiento>();
        }
    }


    Tables LoadTables()
    {
        InitConnectionString();
        WriteLine("// This file was automatically generated by the Dapper.SimpleCRUD T4 Template");
        WriteLine("// Do not make changes directly to this file - edit the template instead");
        WriteLine("// ");
        WriteLine("// The following connection settings were used to generate this file");
        WriteLine("// ");
        WriteLine("//     Connection String Name: `{0}`", ConnectionStringName);
        WriteLine("//     Provider:               `{0}`", ProviderName);
        WriteLine("//     Connection String:      `{0}`", zap_password(ConnectionString));
        WriteLine("//     Include Views:          `{0}`", IncludeViews);
        WriteLine("");

        DbProviderFactory _factory;
        try
        {
            _factory = DbProviderFactories.GetFactory(ProviderName);
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to load provider `{0}` - {1}", ProviderName, error));
            WriteLine("");
            WriteLine("// -----------------------------------------------------------------------------------------");
            WriteLine("// Failed to load provider `{0}` - {1}", ProviderName, error);
            WriteLine("// -----------------------------------------------------------------------------------------");
            WriteLine("");
            return new Tables();
        }

        try
        {
            Tables result;
            using(var conn=_factory.CreateConnection())
            {
                conn.ConnectionString=ConnectionString;         
                conn.Open();
        
                SchemaReader reader=null;
        
                // Assume SQL Server
                reader=new SqlServerSchemaReader();
			
                reader.outer=this;
                result=reader.ReadSchema(conn, _factory);
                // Remove unrequired tables/views
                for (int i=result.Count-1; i>=0; i--)
                {
                    if (SchemaName!=null && string.Compare(result[i].Schema, SchemaName, true)!=0)
                    {
                        result.RemoveAt(i);
                        continue;
                    }
                    if (!IncludeViews && result[i].IsView)
                    {
                        result.RemoveAt(i);
                        continue;
                    }
                }

                conn.Close();


                var rxClean = new Regex("^(Equals|GetHashCode|GetType|ToString|repo|Save|IsNew|Insert|Update|Delete|Exists|SingleOrDefault|Single|First|FirstOrDefault|Fetch|Page|Query)$");
                foreach (var t in result)
                {
                    t.ClassName = ClassPrefix + t.ClassName + ClassSuffix;
                    foreach (var c in t.Columns)
                    {
                        c.PropertyName = rxClean.Replace(c.PropertyName, "_$1");
                        // Make sure property name doesn't clash with class name
                        if (c.PropertyName == t.ClassName)
                            c.PropertyName = "_" + c.PropertyName;
                    }
                }

                return result;
            }
        }
        catch (Exception x)
        {
            var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
            Warning(string.Format("Failed to read database schema - {0}", error));
            WriteLine("");
            WriteLine("// -----------------------------------------------------------------------------------------");
            WriteLine("// Failed to read database schema - {0}", error);
            WriteLine("// -----------------------------------------------------------------------------------------");
            WriteLine("");
            return new Tables();
        }

        
    }

    abstract class SchemaReader
    {
        public abstract Tables ReadSchema(DbConnection connection, DbProviderFactory factory);
        public GeneratedTextTransformation outer;
        public abstract List<FuncionTabla> ReadFuncionTabla(DbConnection connection, DbProviderFactory factory);
        public abstract List<Procedimiento> ReadProcedimiento(DbConnection connection, DbProviderFactory factory);        
        public abstract List<TipoDto> ReadTiposDto(DbConnection connection, DbProviderFactory factory);
        public abstract List<TipoPapelera> ReadTiposPapelera(DbConnection connection, DbProviderFactory factory);
        public abstract List<ColumnaTablaRetornoFT> ReadTablaRetornoFT(DbConnection connection, DbProviderFactory factory);
        public abstract List<ColumnaTablaRetornoProc> ReadTablaProcedimiento(DbConnection connection, DbProviderFactory factory, string nombreProcedimiento);
        public void WriteLine(string o)
        {
            outer.WriteLine(o);
        }

    }
    
    public class Parametro
    {
        public string Nombre { get; set; }
        public string Tipo { get; set; }
    }


    public class FuncionTabla 
    {
        public string Nombre { get; set; }
        public List<Parametro> Parametros { get; set; }
        public List<ColumnaTablaRetornoFT> ColumnasRetorno { get; set; }
    }

    public class TipoDto
    {
        public string Nombre { get; set; }
        public List<Parametro> Parametros { get; set; }

        public bool IsColumns(List<ColumnaTablaRetornoProc> parametros)
        {
            if(Parametros.Count() != Parametros.Count()) return false;
            foreach(var param in parametros){
                if(!Parametros.Any(elemento => elemento.Nombre == param.Nombre)){
                    return false;
                }
            }
            return true;
        }

        public bool IsColumns(List<ColumnaTablaRetornoFT> columnas)
        {
            if(Parametros.Count() != Parametros.Count()) return false;
            foreach(var col in columnas){
                if(!Parametros.Any(elemento => elemento.Nombre == col.Nombre)){
                    return false;
                }
            }
            return true;
        }

    }

    public class TipoPapelera 
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
    }

    public class Procedimiento
    {
        public string Nombre { get; set; }
        public List<Parametro> Parametros { get; set; }
    }

    public class ColumnaTablaRetornoProc
    {
        public string Nombre { get; set; }
        public string Tipo { get; set; }
    }

    public class ColumnaTablaRetornoFT
    {
        public string NombreFT { get; set; }
        public string Nombre { get; set; }
        public string Tipo { get; set; }
    }


    class SqlServerSchemaReader : SchemaReader
    {

        public override List<FuncionTabla> ReadFuncionTabla(DbConnection connection, DbProviderFactory factory)
        {
            List<FuncionTabla> result = new List<FuncionTabla>();

            _connection=connection;
            _factory=factory;
            var cmd=_factory.CreateCommand();
            cmd.Connection=connection;
            cmd.CommandText=FUNCTION_TABLE_SQL;
            //pull the funcion tablas in a reader
            using(cmd)
            {
                using (var rdr=cmd.ExecuteReader())
                {
                    string fnAnterior = string.Empty;
                    FuncionTabla fun = new FuncionTabla() { Nombre = string.Empty,
                                                            Parametros = new List<Parametro>() };                                                         
                    while(rdr.Read())
                    {
                        string nombreActual = rdr["FuncionTabla"].ToString();
                        if(fnAnterior != string.Empty && fnAnterior != nombreActual)
                        {                               
                            result.Add(fun);
                            fun = new FuncionTabla() { Parametros = new List<Parametro>() };
                            fnAnterior = nombreActual;
                        } else if(fnAnterior == string.Empty){
                            fnAnterior = nombreActual;
                        }

                        fun.Nombre = nombreActual;
                        fun.Parametros.Add(new Parametro() { Nombre = rdr["Parametro"].ToString(), 
                                                                         Tipo = GetPropertyType(rdr["Tipo"].ToString()) });                                                                       
                    }
                    if(fun.Nombre != string.Empty){
                        result.Add(fun);
                    }                       
                }
            }
            return result;
        }

        public override List<TipoPapelera> ReadTiposPapelera(DbConnection connection, DbProviderFactory factory)
        {
            List<TipoPapelera> result = new List<TipoPapelera>();

            _connection=connection;
            _factory=factory;
            var cmd=_factory.CreateCommand();
            cmd.Connection=connection;
            cmd.CommandText=TIPOS_PAPELERA_SQL;
            //pull the procedures in a reader
            using(cmd)
            {
                using (var rdr=cmd.ExecuteReader())
                {                                                                        
                    while(rdr.Read())
                    {
                        result.Add(new TipoPapelera() { Id = (int)rdr["Id"], Nombre = rdr["Description"].ToString() });                                                                         
                    }
                }
            }
            return result;
        }

        public override List<TipoDto> ReadTiposDto(DbConnection connection, DbProviderFactory factory)
        {
            List<TipoDto> result = new List<TipoDto>();

            _connection=connection;
            _factory=factory;
            var cmd=_factory.CreateCommand();
            cmd.Connection=connection;
            cmd.CommandText=TIPOS_SQL;
            //pull the procedures in a reader
            using(cmd)
            {
                using (var rdr=cmd.ExecuteReader())
                {
                    string tipoAnterior = string.Empty;
                    TipoDto tipo = new TipoDto() { Nombre = string.Empty,
                                                    Parametros = new List<Parametro>() };                                                         
                    while(rdr.Read())
                    {
                        string nombreActual = rdr["Nombre"].ToString();
                        if(tipoAnterior != string.Empty && tipoAnterior != nombreActual)
                        {                               
                            result.Add(tipo);
                            tipo = new TipoDto() { Parametros = new List<Parametro>() };
                            tipoAnterior = nombreActual;
                        } else if(tipoAnterior == string.Empty){
                            tipoAnterior = nombreActual;
                        }

                        tipo.Nombre = nombreActual;
                        tipo.Parametros.Add(new Parametro() { Nombre = rdr["Parametro"].ToString(), 
                                                                Tipo = GetPropertyType(rdr["Tipo"].ToString()) });                                                                       
                    }
                    if(tipo.Nombre != string.Empty){
                        result.Add(tipo);
                    }
                }
            }
            return result;
        }

        public override List<Procedimiento> ReadProcedimiento(DbConnection connection, DbProviderFactory factory)
        {
            List<Procedimiento> result = new List<Procedimiento>();

            _connection=connection;
            _factory=factory;
            var cmd=_factory.CreateCommand();
            cmd.Connection=connection;
            cmd.CommandText=PROCEDIMIENTOS_SQL;
            //pull the procedures in a reader
            using(cmd)
            {
                using (var rdr=cmd.ExecuteReader())
                {
                    string fnAnterior = string.Empty;
                    Procedimiento fun = new Procedimiento() { Nombre = string.Empty,
                                                              Parametros = new List<Parametro>() };                                                         
                    while(rdr.Read())
                    {
                        string nombreActual = rdr["Procedimiento"].ToString();
                        if(fnAnterior != string.Empty && fnAnterior != nombreActual)
                        {                               
                            result.Add(fun);
                            fun = new Procedimiento() { Parametros = new List<Parametro>() };
                            fnAnterior = nombreActual;
                        } else if(fnAnterior == string.Empty){
                            fnAnterior = nombreActual;
                        }

                        fun.Nombre = nombreActual;
                        fun.Parametros.Add(new Parametro() { Nombre = rdr["Parametro"].ToString(), 
                                                                          Tipo = GetPropertyType(rdr["Tipo"].ToString()) });                                                                       
                    }
                    if(fun.Nombre != string.Empty){
                        result.Add(fun);
                    }                       
                }
            }
            return result;
        }

        public override List<ColumnaTablaRetornoFT> ReadTablaRetornoFT(DbConnection connection, DbProviderFactory factory)
        {
            List<ColumnaTablaRetornoFT> result = new List<ColumnaTablaRetornoFT>();

            _connection=connection;
            _factory=factory;
            var cmd=_factory.CreateCommand();
            cmd.Connection=connection;
            cmd.CommandText=DEF_RETURN_TABLE_VALUED;
            //pull the funcion tablas in a reader
            using(cmd)
            {
                using (var rdr=cmd.ExecuteReader())
                { //TABLE_NAME, COLUMN_NAME, DATA_TYPE
                    while(rdr.Read())
                    {
                        ColumnaTablaRetornoFT col = new ColumnaTablaRetornoFT();
                        col.NombreFT = rdr["TABLE_NAME"].ToString();
                        col.Nombre = rdr["COLUMN_NAME"].ToString();
                        col.Tipo = GetPropertyType(rdr["DATA_TYPE"].ToString());
                        result.Add(col);
                    }                                           
                }
            }
            return result;
        }
        
        public override List<ColumnaTablaRetornoProc> ReadTablaProcedimiento(DbConnection connection, DbProviderFactory factory, string nombreProcedimiento)
        {
            List<ColumnaTablaRetornoProc> result = new List<ColumnaTablaRetornoProc>();

            _connection=connection;
            _factory=factory;
            var cmd=_factory.CreateCommand();
            cmd.Connection=connection;
            cmd.CommandText=string.Format(GET_DEFINITION_RETURN_PROC, nombreProcedimiento);
            //pull the funcion tablas in a reader
            using(cmd)
            {
                using (var rdr=cmd.ExecuteReader())
                { 
                    while(rdr.Read())
                    {
                        ColumnaTablaRetornoProc col = new ColumnaTablaRetornoProc();
                        col.Nombre = rdr["NAME"].ToString();
                        col.Tipo = GetPropertyType(rdr["system_type_name"].ToString().Split('(')[0]);
                        result.Add(col);
                    }                                           
                }
            }
            return result;
        }

        // SchemaReader.ReadSchema
        public override Tables ReadSchema(DbConnection connection, DbProviderFactory factory)
        {
            var result=new Tables();

            _connection=connection;
            _factory=factory;
            var cmd=_factory.CreateCommand();
            cmd.Connection=connection;
            cmd.CommandText=TABLE_SQL;
            //pull the tables in a reader
            using(cmd)
            {
                using (var rdr=cmd.ExecuteReader())
                {
                    while(rdr.Read())
                    {
                        Table tbl=new Table();
                        tbl.Name=rdr["TABLE_NAME"].ToString();
                        tbl.Schema=rdr["TABLE_SCHEMA"].ToString();
                        tbl.IsView=string.Compare(rdr["TABLE_TYPE"].ToString(), "View", true)==0;
                        tbl.CleanName=CleanUp(tbl.Name);
                        if(tbl.CleanName.StartsWith("tbl_")) tbl.CleanName = tbl.CleanName.Replace("tbl_",""); 
                        if(tbl.CleanName.StartsWith("tbl")) tbl.CleanName = tbl.CleanName.Replace("tbl",""); 
                        tbl.CleanName = tbl.CleanName.Replace("_","");
                        tbl.ClassName=Singularize(RemoveTablePrefixes(tbl.CleanName));
                        result.Add(tbl);
                    }
                }
            }

            foreach (var tbl in result)
            {
                tbl.Columns=LoadColumns(tbl);
		            
                // Mark the primary key
                string[] PrimaryKeys=GetPK(tbl.Name);
                foreach (string primaryKey in PrimaryKeys)
                {
                    var pkColumn=tbl.Columns.SingleOrDefault(x=>x.Name.ToLower().Trim()==primaryKey.ToLower().Trim());
                    if(pkColumn!=null)
                    {
                        pkColumn.IsPK=true;
                    }
                }

                try
                {
                    tbl.OuterKeys = LoadOuterKeys(tbl);
                    tbl.InnerKeys = LoadInnerKeys(tbl);
                }
                catch (Exception x)
                {
                    var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
                    WriteLine("");
                    WriteLine("// -----------------------------------------------------------------------------------------");
                    WriteLine(String.Format("// Failed to get relationships for `{0}` - {1}", tbl.Name, error));
                    WriteLine("// -----------------------------------------------------------------------------------------");
                    WriteLine("");
                }
            }
	    

            return result;
        }
	
        DbConnection _connection;
        DbProviderFactory _factory;
	

        List<Column> LoadColumns(Table tbl)
        {
	
            using (var cmd=_factory.CreateCommand())
            {
                cmd.Connection=_connection;
                cmd.CommandText=COLUMN_SQL;
                var p = cmd.CreateParameter();
                p.ParameterName = "@tableName";
                p.Value=tbl.Name;
                cmd.Parameters.Add(p);
                p = cmd.CreateParameter();
                p.ParameterName = "@schemaName";
                p.Value=tbl.Schema;
                cmd.Parameters.Add(p);
                var result=new List<Column>();
                using (IDataReader rdr=cmd.ExecuteReader())
                {
                    while(rdr.Read())
                    {
                        Column col=new Column();
                        col.Name=rdr["ColumnName"].ToString();
                        col.PropertyName=CleanUp(col.Name);
                        col.PropertyType=GetPropertyType(rdr["DataType"].ToString());
                        col.IsNullable=rdr["IsNullable"].ToString()=="YES";
                        col.IsAutoIncrement=((int)rdr["IsIdentity"])==1;
                        col.Descripcion = (rdr["Descripcion"] ?? string.Empty).ToString();
                        var maxlen = (rdr["MaxLength"] ?? string.Empty).ToString();
                        if(!string.IsNullOrEmpty(maxlen)){
                            var maxlenint = int.Parse(maxlen);
                            if(maxlenint > 0){
                                col.MaxLength = maxlenint;
                            }       
                        }
                        result.Add(col);
                    }
                }

                return result;
            }
        }

        List<Key> LoadOuterKeys(Table tbl)
        {
            using (var cmd=_factory.CreateCommand())
            {
                cmd.Connection=_connection;
                cmd.CommandText=OUTER_KEYS_SQL;
                var p = cmd.CreateParameter();
                p.ParameterName = "@tableName";
                p.Value=tbl.Name;
                cmd.Parameters.Add(p);
                var result=new List<Key>();
                using (IDataReader rdr=cmd.ExecuteReader())
                {
                    while(rdr.Read())
                    {
                        var key=new Key();
                        key.Name=rdr["FK"].ToString();
                        key.ReferencedTableName = rdr["Referenced_tbl"].ToString();
                        key.ReferencedTableColumnName = rdr["Referenced_col"].ToString();
                        key.ReferencingTableColumnName = rdr["Referencing_col"].ToString();
                        result.Add(key);
                    }
                }

                return result;
            }
        }

        List<Key> LoadInnerKeys(Table tbl)
        {
            using (var cmd=_factory.CreateCommand())
            {
                cmd.Connection=_connection;
                cmd.CommandText=INNER_KEYS_SQL;
                var p = cmd.CreateParameter();
                p.ParameterName = "@tableName";
                p.Value=tbl.Name;
                cmd.Parameters.Add(p);
                var result=new List<Key>();
                using (IDataReader rdr=cmd.ExecuteReader())
                {
                    while(rdr.Read())
                    {
                        var key=new Key();
                        key.Name=rdr["FK"].ToString();
                        key.ReferencingTableName = rdr["Referencing_tbl"].ToString();
                        key.ReferencedTableColumnName = rdr["Referenced_col"].ToString();
                        key.ReferencingTableColumnName = rdr["Referencing_col"].ToString();
                        result.Add(key);
                    }
                }

                return result;
            }
        }

        string[] GetPK(string table){
		
            string sql=@"SELECT c.name AS ColumnName
                FROM sys.indexes AS i 
                INNER JOIN sys.index_columns AS ic ON i.object_id = ic.object_id AND i.index_id = ic.index_id 
                INNER JOIN sys.objects AS o ON i.object_id = o.object_id 
                LEFT OUTER JOIN sys.columns AS c ON ic.object_id = c.object_id AND c.column_id = ic.column_id
                WHERE (i.type = 1) AND (o.name = @tableName)";
            List<string> primaryKeys = new List<string>();
            using (var cmd=_factory.CreateCommand())
            {
                cmd.Connection=_connection;
                cmd.CommandText=sql;
                var p = cmd.CreateParameter();
                p.ParameterName = "@tableName";
                p.Value=table;
                cmd.Parameters.Add(p);
                using(var result=cmd.ExecuteReader())
                {
                    if(result!=null && result.HasRows)
                    {
                        while (result.Read())
                        {
                            primaryKeys.Add(result.GetString(0));
                        }   
                    }
                }
            }	         
		
            return primaryKeys.ToArray();
        }
	
        string GetPropertyType(string sqlType)
        {
            string sysType="string";
            switch (sqlType) 
            {
                case "bigint":
                    sysType = "long";
                    break;
                case "smallint":
                    sysType= "short";
                    break;
                case "int":
                    sysType= "int";
                    break;
                case "uniqueidentifier":
                    sysType=  "Guid";
                    break;
                case "smalldatetime":
                case "datetime":
                case "datetime2":
                case "date":
                case "time":
                    sysType=  "DateTime";
                    break;
                case "float":
                    sysType="double";
                    break;
                case "real":
                    sysType="float";
                    break;
                case "numeric":
                case "smallmoney":
                case "decimal":
                case "money":
                    sysType=  "decimal";
                    break;
                case "tinyint":
                    sysType = "byte";
                    break;
                case "bit":
                    sysType=  "bool";
                    break;
                case "image":
                case "binary":
                case "varbinary":
                case "timestamp":
                    sysType=  "byte[]";
                    break;
                case "geography":
                    sysType = "Microsoft.SqlServer.Types.SqlGeography";
                    break;
                case "geometry":
                    sysType = "Microsoft.SqlServer.Types.SqlGeometry";
                    break;
                case "hierarchyid":
                    sysType = "SqlHierarchyId";
                    break;

            }
            return sysType;
        }

        const string FUNCTION_TABLE_SQL = @"SELECT SO.name AS FuncionTabla, SUBSTRING(SP.name, 2, LEN(SP.name)) AS Parametro, T.name AS Tipo FROM SYS.all_parameters SP 
                                            INNER JOIN SYS.SYSOBJECTS SO ON SO.XTYPE='TF' AND SP.object_id = SO.id
                                            INNER JOIN SYS.types T ON SP.system_type_id = T.system_type_id
                                            ORDER BY FuncionTabla";   
        
        const string PROCEDIMIENTOS_SQL = @"SELECT SO.name AS Procedimiento, SUBSTRING(SP.name, 2, LEN(SP.name)) AS Parametro, T.name AS Tipo FROM SYS.all_parameters SP 
                                            INNER JOIN SYS.SYSOBJECTS SO ON SO.XTYPE='P' AND SP.object_id = SO.id
                                            INNER JOIN SYS.types T ON SP.system_type_id = T.system_type_id
                                            ORDER BY Procedimiento";   

        const string DEF_RETURN_TABLE_VALUED = @"SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE	
                                                 FROM INFORMATION_SCHEMA.ROUTINE_COLUMNS
                                                 ORDER BY TABLE_NAME";

        const string GET_DEFINITION_RETURN_PROC = "EXEC sp_describe_first_result_set N'{0}';";

        const string TIPOS_SQL = @"select tt.name AS Nombre, c.name AS Parametro, t.name AS Tipo from sys.table_types tt
                                    INNER JOIN sys.columns c on c.object_id = tt.type_table_object_id
                                    INNER JOIN sys.types AS t ON c.system_type_id = t.user_type_id
                                    WHERE tt.is_user_defined = 1
                                    ORDER BY tt.name";

        const string TIPOS_PAPELERA_SQL = @"SELECT [Id]
                                                  ,[Description]
                                            FROM [Ejercicio].[dbo].[TypeRegisterRecyclebin]";

        const string TABLE_SQL=@"SELECT *
            FROM  INFORMATION_SCHEMA.TABLES
            WHERE TABLE_TYPE='BASE TABLE' OR TABLE_TYPE='VIEW'";

        const string COLUMN_SQL=@"SELECT 
            sc.TABLE_CATALOG AS [Database],
            sc.TABLE_SCHEMA AS Owner, 
            sc.TABLE_NAME AS TableName, 
            sc.COLUMN_NAME AS ColumnName, 
            sc.ORDINAL_POSITION AS OrdinalPosition, 
            sc.COLUMN_DEFAULT AS DefaultSetting, 
            sc.IS_NULLABLE AS IsNullable, 
            sc.DATA_TYPE AS DataType, 
            sc.CHARACTER_MAXIMUM_LENGTH AS MaxLength, 
            sc.DATETIME_PRECISION AS DatePrecision,
            COLUMNPROPERTY(object_id('[' + sc.TABLE_SCHEMA + '].[' + sc.TABLE_NAME + ']'), sc.COLUMN_NAME, 'IsIdentity') AS IsIdentity,
            COLUMNPROPERTY(object_id('[' + sc.TABLE_SCHEMA + '].[' + sc.TABLE_NAME + ']'), sc.COLUMN_NAME, 'IsComputed') as IsComputed,
            prop.value as Descripcion
            FROM  INFORMATION_SCHEMA.COLUMNS as sc
            INNER JOIN sys.columns AS syc ON syc.object_id = object_id(sc.table_schema + '.' + sc.table_name) AND syc.NAME = sc.COLUMN_NAME
            LEFT JOIN sys.extended_properties prop ON prop.major_id = syc.object_id	AND prop.minor_id = syc.column_id AND prop.NAME = 'MS_Description'
            WHERE TABLE_NAME=@tableName AND TABLE_SCHEMA=@schemaName
            ORDER BY OrdinalPosition ASC";

        const string OUTER_KEYS_SQL = @"SELECT 
            FK = OBJECT_NAME(pt.constraint_object_id),
            Referenced_tbl = OBJECT_NAME(pt.referenced_object_id),
            Referencing_col = pc.name, 
            Referenced_col = rc.name
            FROM sys.foreign_key_columns AS pt
            INNER JOIN sys.columns AS pc
            ON pt.parent_object_id = pc.[object_id]
            AND pt.parent_column_id = pc.column_id
            INNER JOIN sys.columns AS rc
            ON pt.referenced_column_id = rc.column_id
            AND pt.referenced_object_id = rc.[object_id]
            WHERE pt.parent_object_id = OBJECT_ID(@tableName);";

        const string INNER_KEYS_SQL = @"SELECT 
            [Schema] = OBJECT_SCHEMA_NAME(pt.parent_object_id),
            Referencing_tbl = OBJECT_NAME(pt.parent_object_id),
            FK = OBJECT_NAME(pt.constraint_object_id),
            Referencing_col = pc.name, 
            Referenced_col = rc.name
            FROM sys.foreign_key_columns AS pt
            INNER JOIN sys.columns AS pc
            ON pt.parent_object_id = pc.[object_id]
            AND pt.parent_column_id = pc.column_id
            INNER JOIN sys.columns AS rc
            ON pt.referenced_column_id = rc.column_id
            AND pt.referenced_object_id = rc.[object_id]
            WHERE pt.referenced_object_id = OBJECT_ID(@tableName);";
	  
    }

#>