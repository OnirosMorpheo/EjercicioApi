    
// This file was automatically generated by the Dapper.SimpleCRUD T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `conexionEjercicio`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\data\bbddLocal.mdf;Integrated Security=True;Connect Timeout=300;`
//     Include Views:          `True`



namespace Ejercicio.Entities
{

	using Ejercicio.Persistencia;
    using Ejercicio.Persistencia.Interfaces;
    using Ejercicio.Persistencia.Metadata;
    using Ejercicio.Persistencia.Propiedades;
    using Ejercicio.Trazas;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    public enum TypeRecyclebin : int {
    }

    public class Auditoria
    {
        public string CreatedBy { get; set; }
        public DateTime CreatedDate { get; set; }
        public string UpdateBy { get; set; }
        public DateTime UpdatedDate { get; set; }
    }

	public partial class KeyTrazaDto :  IPrimaryKey
	{        
        [Key]
		public int Id { get; set; }        
        [NotMapped]
		public int Count => 1;
        [NotMapped]
		public string Where => "[Id] = @Id";
        [NotMapped]
		public string Select => "_trazas.[Id]";
		[NotMapped]
		public List<string> ListaParametros => new List<string>();
		public override string ToString()
		{
			return "Id";
		}
	}
    
	[Table("[Trazas]")]
	[Alias("_trazas")]
	public partial class TrazaDto : KeyTrazaDto 
	{
        [Required]
		public Guid Uid { get; set; }
        [Required]
		public Guid UidPeticion { get; set; }
        [Required]
		public DateTime CreadoEn { get; set; }
        [MaxLength(4000)]
    	public string Dll { get; set; }
        [Required]
		public bool EsExcepcion { get; set; }
    	public string Descripcion { get; set; }
        [MaxLength(4000)]
    	public string FullName { get; set; }
        [MaxLength(4000)]
    	public string Name { get; set; }
        [MaxLength(4000)]
    	public string Namespace { get; set; }
        [MaxLength(4000)]
    	public string Nick { get; set; }
    	public string Parametros { get; set; }
        [Required]
		public int Nivel { get; set; }
	}

	public partial class KeyUserDto : Auditoria,  IPrimaryKey
	{        
        [Key]
		public int Id { get; set; }        
        [NotMapped]
		public int Count => 1;
        [NotMapped]
		public string Where => "[Id] = @Id";
        [NotMapped]
		public string Select => "_user.[Id]";
		[NotMapped]
		public List<string> ListaParametros => new List<string>() { "Id" };
		public override string ToString()
		{
			return "Id";
		}
	}
    
	[Table("[User]")]
	[Alias("_user")]
	public partial class UserDto : KeyUserDto 
	{
        [Required]
		public Guid Uid { get; set; }
        [MaxLength(100)]
    	public string Name { get; set; }
    	public DateTime? Birthdate { get; set; }
    	public DateTime? DeleteDate { get; set; }
	}




    internal class MetadataDB
    {
        public List<Tabla> Tablas { get; set; }
        public List<Relacion> Relaciones { get; set; }
        public MetadataDB()
        {
            Tablas = new List<Tabla>();
            Relaciones = new List<Relacion>();

            var tablasDict = new Dictionary<string, Tabla>();

			// TABLAS
			#region Trazas
			var tab_Trazas = new Tabla("_trazas","Trazas"); 
			tab_Trazas.Propiedades.Add(new Propiedad("Id","int","",false,0));
			tab_Trazas.Propiedades.Add(new Propiedad("Uid","Guid","",false,0));
			tab_Trazas.Propiedades.Add(new Propiedad("UidPeticion","Guid","",false,0));
			tab_Trazas.Propiedades.Add(new Propiedad("CreadoEn","DateTime","",false,0));
			tab_Trazas.Propiedades.Add(new Propiedad("Dll","string","",true,4000));
			tab_Trazas.Propiedades.Add(new Propiedad("EsExcepcion","bool","",false,0));
			tab_Trazas.Propiedades.Add(new Propiedad("Descripcion","string","",true,0));
			tab_Trazas.Propiedades.Add(new Propiedad("FullName","string","",true,4000));
			tab_Trazas.Propiedades.Add(new Propiedad("Name","string","",true,4000));
			tab_Trazas.Propiedades.Add(new Propiedad("Namespace","string","",true,4000));
			tab_Trazas.Propiedades.Add(new Propiedad("Nick","string","",true,4000));
			tab_Trazas.Propiedades.Add(new Propiedad("Parametros","string","",true,0));
			tab_Trazas.Propiedades.Add(new Propiedad("Nivel","int","",false,0));
			tablasDict.Add("Trazas",tab_Trazas);
			#endregion
			#region User
			var tab_User = new Tabla("_user","User"); 
			tab_User.Propiedades.Add(new Propiedad("Id","int","",false,0));
			tab_User.Propiedades.Add(new Propiedad("Uid","Guid","",false,0));
			tab_User.Propiedades.Add(new Propiedad("Name","string","",true,100));
			tab_User.Propiedades.Add(new Propiedad("Birthdate","DateTime?","",true,0));
			tab_User.Propiedades.Add(new Propiedad("DeleteDate","DateTime?","",true,0));
			tab_User.Propiedades.Add(new Propiedad("CreatedBy","string","",false,4000));
			tab_User.Propiedades.Add(new Propiedad("CreatedDate","DateTime?","",true,0));
			tab_User.Propiedades.Add(new Propiedad("UpdateBy","string","",true,4000));
			tab_User.Propiedades.Add(new Propiedad("UpdatedDate","DateTime?","",true,0));
			tablasDict.Add("User",tab_User);
			#endregion

            Tablas = tablasDict.Select(kv => kv.Value).ToList();

			// RELACIONES

			Relaciones = Tablas.SelectMany(t => t.Relaciones).GroupBy(r => r.Id).Select(gb => gb.First()).ToList();
        }
    }


    }
